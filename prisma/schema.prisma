// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   Int     @id @default(autoincrement()) // User ID, auto-incremented
  telegramId           BigInt  @unique
  username             String?
  points               BigInt  @default(0) // Points earned by the user
  invitedFriends       User[]  @relation("FriendInvites") // Array of users (self-relation)
  completedTasks       Task[] // Array of completed tasks
  profitPerHour        Int     @default(0)
  pointsPerClick       Int     @default(1) // Points generated per click, default is 1
  energyBar            Int     @default(1000) // Energy bar, starting value is 100
  rechargeSpeed        Int     @default(1)
  referredBy           BigInt? // The telegramId of the user who referred them
  upgradeLevelClick    Int     @default(1) // Level of points per click upgrade
  upgradeLevelEnergy   Int     @default(1) // Level of energy bar upgrade
  upgradeLevelProfit   Int     @default(1) // Level of profit per hour upgrade
  upgradeLevelRecharge Int     @default(1)

  User      User[]     @relation("FriendInvites")
  referrals Referral[]
  cards     UserCard[]
}

model Referral {
  id                 Int     @id @default(autoincrement())
  userId             BigInt
  referredUser       User    @relation(fields: [userId], references: [telegramId])
  referrerTelegramId BigInt // The Telegram ID of the user who referred
  rewardClaimed      Boolean @default(false) // Track if the referrer has claimed the reward
}

model Task {
  id          Int      @id @default(autoincrement()) // Task ID, auto-incremented
  name        String // Task name
  description String? // Task description (optional)
  completedAt DateTime @default(now()) // When the task was completed
  userId      Int // Reference to the User who completed the task
  user        User     @relation(fields: [userId], references: [id]) // Foreign key to User
}

model Card {
  id               String       @id @default(uuid())
  title            String
  imageUrl         String // URL or path to the image
  basePrice        Int // Base price to unlock the card
  baseProfit       Int // Base profit per hour
  profitMultiplier Float // Multiplier for profit per level
  priceMultiplier  Float // Multiplier for price per level
  category         CardCategory

  // Relations
  users UserCard[]
}

model UserCard {
  id           String @id @default(uuid())
  userId       BigInt
  cardId       String
  upgradeLevel Int    @default(1) // Tracks the level of the card the user has upgraded to

  // Relations
  user User @relation(fields: [userId], references: [telegramId])
  card Card @relation(fields: [cardId], references: [id])

  @@unique([userId, cardId]) // Ensure the same user cannot unlock the same card multiple times
}

enum CardCategory {
  COURAGE
  WISDOM
  HONOR
  SHADOWS
}
